/**
 * n2o theme
 *
/*global tinymce:true */
tinymce.ThemeManager.add('n2o', function(editor) {
  var self = this, settings = editor.settings, Factory = tinymce.ui.Factory, each = tinymce.each, DOM = tinymce.DOM;

  /**
   * @return {Array} Array with buttons.
   */
  function createToolbar() {
    var items = settings.toolbar;
    var buttons = [];
    if (!items) return;

    each(items.split(/[ ,]/), function(item) {
      var itemName;
      function bindSelectorChanged() {
        var selection = editor.selection;

        if (itemName == "bullist") selection.selectorChanged('ul > li', function(state, args) {
          var nodeName, i = args.parents.length;
          while (i--) {
            nodeName = args.parents[i].nodeName;
            if (nodeName == "OL" || nodeName == "UL") break;
          }
          item.active(nodeName == "UL");
        });

        if (itemName == "numlist") selection.selectorChanged('ol > li', function(state, args) {
          var nodeName, i = args.parents.length;

          while (i--) {
            nodeName = args.parents[i].nodeName;
            if (nodeName == "OL" || nodeName == "UL") break;
          }

          item.active(nodeName == "OL");
        });

        if (item.settings.stateSelector) selection.selectorChanged(item.settings.stateSelector, function(state) {
            item.active(state);
        }, true);

        if (item.settings.disabledStateSelector) selection.selectorChanged(item.settings.disabledStateSelector, function(state) {
          item.disabled(state);
        });
      }
      if (item != "|") {
        if (Factory.has(item)) {
          item = {type: item};
        } else {
          if (editor.buttons[item]) {
            itemName = item;
            item = editor.buttons[itemName];
            item.type = item.type || 'button';

            item = Factory.create(item);
            buttons.push(item);

            if (editor.initialized) {
              bindSelectorChanged();
            } else {
              editor.on('init', bindSelectorChanged);
            }
          }
        }
      }
    });
    return buttons;
  }


	/**
	 * Adds accessibility shortcut keys to panel.
	 *
	 * @param {tinymce.ui.Panel} panel Panel to add focus to.
	 */
	function addAccessibilityKeys(panel) {
		function focus(type) {
			var item = panel.find(type)[0];

			if (item) {
				item.focus();
			}
		}
		panel.on('cancel', function() {
			editor.focus();
		});
	}

	/**
	 * Resizes the editor to the specified width, height.
	 */
	function resizeTo(width, height) {
		var containerElm, iframeElm, containerSize, iframeSize;

		function getSize(elm) {
			return {
				width: elm.clientWidth,
				height: elm.clientHeight
			};
		}

		containerElm = editor.getContainer();
		iframeElm = editor.getContentAreaContainer().firstChild;
		containerSize = getSize(containerElm);
		iframeSize = getSize(iframeElm);

		width = Math.max(settings.min_width || 100, width);
		height = Math.max(settings.min_height || 100, height);
		width = Math.min(settings.max_width || 0xFFFF, width);
		height = Math.min(settings.max_height || 0xFFFF, height);

		DOM.css(containerElm, 'width', width + (containerSize.width - iframeSize.width));
		DOM.css(iframeElm, 'width', width);
		DOM.css(iframeElm, 'height', height);

		editor.fire('ResizeEditor');
	}

	function resizeBy(dw, dh) {
		var elm = editor.getContentAreaContainer();
		self.resizeTo(elm.clientWidth + dw, elm.clientHeight + dh);
	}

	/**
	 * Renders the inline editor UI.
	 *
	 * @return {Object} Name/value object with theme data.
	 */
  function renderInlineUI() {
    var panel, inlineToolbarContainer, focus;

    if (settings.fixed_toolbar_container) {
      inlineToolbarContainer = DOM.select(settings.fixed_toolbar_container)[0];
    }

    function reposition() {
      if (panel && panel.moveRel && panel.is(':visible') && !panel._fixed) {
        panel.moveRel(editor.getBody(), ['tl-bl', 'bl-tl']);
      }
    }

    function show() {
      if (panel) {
        panel.show();
        reposition();
        DOM.addClass(editor.getBody(), 'mce-edit-focus');
      }
    }

    function hide(e) {
      if (panel) {
        panel.hide();
        DOM.removeClass(editor.getBody(), 'mce-edit-focus');
      }
    }

    function render() {
      if (panel) {
        if (panel.is(':hidden')) show();
        return;
      }

      panel = $(inlineToolbarContainer);
      var ul = $("<ul>").attr({'class': 'nav nav-list'}).appendTo(panel);
      var events = [];
      createToolbar().map(function(i){
        $.extend(i, {postRender: function(){}, renderHtml: function(){
          var self = this, id = self._id, icon = self.settings.icon;
          var b = $("<button>").attr({
            'id': id, 
            tabindex: -1,
            type: 'button',
            title: self.settings.title,
            class: 'btn',
            value: self._text ? self.encode(self._text) : '',
            role: 'presentation'});
          if(icon) $("<i/>").attr('class', icon).appendTo(b);

          return b.clone().wrap("<div/>").parent().html();
        }}).renderTo($("<li>").appendTo(ul).get(0));
        events.push({id: i._id, onclick: i.settings.onclick});
      });
      addAccessibilityKeys(panel);
      show();
      events.map(function(e){ $('#'+e.id).on('click', e.onclick).on('focus', function(e){ e.stopPropagation();}); });
      panel.on('mousedown', function(e){ e.preventDefault(); return setTimeout('', 300);});

      editor.on('nodeChange', reposition);
      editor.on('activate', show);
      editor.on('deactivate', hide);
    }

    settings.content_editable = true;

    editor.on('focus', render);
    editor.on('blur', hide);

    // Remove the panel when the editor is removed
    editor.on('remove', function() {
      if (panel) {
        panel.remove();
        panel = null;
      }
    });


    return {};
  }


	/**
	 * Renders the UI for the theme. This gets called by the editor.
	 *
	 * @param {Object} args Details about target element etc.
	 * @return {Object} Theme UI data items.
	 */
	self.renderUI = function(args) {
		var skin = settings.skin !== false ? settings.skin || 'lightgray' : false;

		if (skin) {
			// Load special skin for IE7
			// TODO: Remove this when we drop IE7 support
			if (tinymce.Env.documentMode <= 7) {
				tinymce.DOM.loadCSS(tinymce.baseURL + '/skins/' + skin + '/skin.ie7.min.css');
			} else {
				tinymce.DOM.loadCSS(tinymce.baseURL + '/skins/' + skin + '/skin.min.css');
			}

			// Load content.min.css or content.inline.min.css
			editor.contentCSS.push(tinymce.baseURL + '/skins/' + skin + '/content' + (editor.inline ? '.inline' : '') + '.min.css');
		}

		// Handle editor setProgressState change
		editor.on('ProgressState', function(e) {
			self.throbber = self.throbber || new tinymce.ui.Throbber(self.panel.getEl('body'));

			if (e.state) {
				self.throbber.show(e.time);
			} else {
				self.throbber.hide();
			}
		});

		// Render inline UI
      return renderInlineUI(args);
	};

	self.resizeTo = resizeTo;
	self.resizeBy = resizeBy;
});
